/*
 * Copyright (C) 2023 PixieBrix, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import { type ThunkAction, type Action } from "@reduxjs/toolkit";

// # import pkg from "@reduxjs/toolkit";

import { type AsyncState } from "@/types/sliceTypes";

import * as toolkitRaw from "@reduxjs/toolkit";

const { configureStore, createAsyncThunk, createSlice } = ((toolkitRaw as any).default ?? toolkitRaw) as typeof toolkitRaw;

// # const { configureStore, createAsyncThunk, createSlice } = pkg;

const initialState: AsyncState<number> = {
  data: 0,
  currentData: 0,
  isUninitialized: false,
  isFetching: false,
  isLoading: false,
  isSuccess: false,
  isError: false,
  error: undefined
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const updateAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await getCurrentValue();
    console.log("Current Value:", response.value);
    // The value we return becomes the `fulfilled` action payload
    return amount;
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(updateAsync.pending, (state) => {
        state.data = state.currentData;
        state.currentData = undefined;
        state.isUninitialized = false;
        state.isFetching = true;
        state.isLoading = true;
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.data =
          state.data === undefined
            ? action.payload
            : state.data + action.payload;
        state.currentData = state.data;
        state.isUninitialized = false;
        state.isFetching = false;
        state.isLoading = false;
        state.isSuccess = true;
        state.isError = false;
        state.error = undefined;
      })
      .addCase(updateAsync.rejected, (state) => {
        state.data = undefined;
        state.currentData = undefined;
        state.isUninitialized = false;
        state.isFetching = false;
        state.isLoading = false;
        state.isSuccess = false;
        state.isError = true;
        state.error = "Rejected";
      });
  },
});

export const store = configureStore({
  reducer: {
    counter: counterSlice.reducer,
  },
});

export type AppDispatch = typeof store.dispatch;
export type RootState = ReturnType<typeof store.getState>;
export type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  RootState,
  unknown,
  Action<string>
>;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.data;

// Async State Source
let value = 0;
const listeners = new Set<() => void>();
export async function getCurrentValue(): Promise<{ value: number }> {
    return {
      value,
    };
}

/** Helper to update the value in tests **/
export function setCurrentValue(newNumber: number): void {
  value = newNumber;
  for (const listener of listeners) {
    listener();
  }
}

export async function subscribe(listener: () => void) {
  listeners.add(listener);
}

export async function unsubscribe(listener: () => void) {
  listeners.delete(listener);
}

// Testing
// void subscribe(async () => {
//   const currentValue = await getCurrentValue();
//   void store.dispatch(updateAsync(currentValue.value));
// });

// setCurrentValue(10);
// setCurrentValue(10);
// setCurrentValue(10);

// store.subscribe(() => {
//   console.log(store.getState());
// });
