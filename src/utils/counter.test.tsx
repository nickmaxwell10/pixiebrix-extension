/*
 * Copyright (C) 2023 PixieBrix, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import React from "react";
import useAsyncState from "@/hooks/useAsyncState";
import { render, screen } from "@testing-library/react";
import { waitForEffect } from "@/testUtils/testHelpers";
import { Provider, useSelector } from "react-redux";
import { configureStore, createSlice } from "@reduxjs/toolkit";
import { type AsyncState } from "@/types/sliceTypes";
import {
  getCurrentValue,
  subscribe,
  setCurrentValue,
  updateAsync,
} from "./counter";

type TestRootState = {
  dummySlice: {
    data: number;
  };
};

const asyncMock = jest.fn().mockResolvedValue(42);

const ValueComponent: React.FunctionComponent = () => {
  // Using our useAsyncState hook
  const { data } = useAsyncState(updateAsync, []);
  // Example of using useSelector to get data from the Redux store
  const greeting = useSelector((state: TestRootState) => state.dummySlice.data);

  return (
    <div>
      <div data-testid="greeting">{greeting}</div>
      <div data-testid="data">{data}</div>
    </div>
  );
};

const initialState: AsyncState<number> = {
  data: 0,
  currentData: 0,
  isUninitialized: false,
  isFetching: false,
  isLoading: false,
  isSuccess: false,
  isError: false,
  error: undefined,
};

/**
 * A dummy slice because configureStore requires at least one reducer
 */

const dummySlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(updateAsync.pending, (state) => {
        state.data = state.currentData;
        state.currentData = undefined;
        state.isUninitialized = false;
        state.isFetching = true;
        state.isLoading = true;
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.data =
          state.data === undefined
            ? action.payload
            : state.data + action.payload;
        state.currentData = state.data;
        state.isUninitialized = false;
        state.isFetching = false;
        state.isLoading = false;
        state.isSuccess = true;
        state.isError = false;
        state.error = undefined;
      })
      .addCase(updateAsync.rejected, (state) => {
        state.data = undefined;
        state.currentData = undefined;
        state.isUninitialized = false;
        state.isFetching = false;
        state.isLoading = false;
        state.isSuccess = false;
        state.isError = true;
        state.error = "Rejected";
      });
  },
});

/**
 * Create a Redux store for use in the tests.
 */
function createTestStore() {
  return configureStore({
    reducer: {
      // Add your reducer(s) here. Using a dummy slice because Redux throws exception if no reducer is provided
      dummySlice: dummySlice.reducer,
    },
  });
}

describe("asyncStateSlice", () => {
  beforeEach(() => {
    // Reset the mock call history before each test
    jest.clearAllMocks();
  });

  it("happy path", async () => {
    const store = createTestStore();
    void subscribe(async () => {
      console.log("CHANGE FOUND")
      const currentValue = await getCurrentValue();
      void store.dispatch(updateAsync(currentValue.value));
    });
    store.subscribe(() => {
      console.log(store.getState());
    });

    setCurrentValue(10);
    setCurrentValue(10);
    setCurrentValue(10);
    
    render(
      <Provider store={store}>
        <ValueComponent />
      </Provider>
    );
    await waitForEffect();
    const data: { value: number } = await getCurrentValue();
    console.log("Value", data.value.toString())
    expect(asyncMock).toHaveBeenCalledOnce();
    expect(screen.getByTestId("greeting")).toHaveTextContent("30");
  });
});
